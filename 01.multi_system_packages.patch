diff --git a/nixpkgs/nixpkgs.bzl b/nixpkgs/nixpkgs.bzl
index 1aa2e54..898a401 100644
--- a/nixpkgs/nixpkgs.bzl
+++ b/nixpkgs/nixpkgs.bzl
@@ -104,6 +104,7 @@ def _is_supported_platform(repository_ctx):
 def _nixpkgs_package_impl(repository_ctx):
     repository = repository_ctx.attr.repository
     repositories = repository_ctx.attr.repositories
+    systems = repository_ctx.attr.systems
 
     # Is nix supported on this platform?
     not_supported = not _is_supported_platform(repository_ctx)
@@ -256,6 +257,7 @@ _nixpkgs_package = repository_rule(
         "nix_file_deps": attr.label_list(),
         "nix_file_content": attr.string(),
         "repositories": attr.label_keyed_string_dict(),
+        "systems": attr.label_keyed_string_dict(),
         "repository": attr.label(),
         "build_file": attr.label(),
         "build_file_content": attr.string(),
@@ -277,6 +279,8 @@ def nixpkgs_package(
         repositories = {},
         build_file = None,
         build_file_content = "",
+        systems = {},
+        targets = [],
         nixopts = [],
         quiet = False,
         fail_not_supported = True,
@@ -354,7 +358,21 @@ def nixpkgs_package(
         inversed_repositories = {value: key for (key, value) in kwargs["repositories"].items()}
         kwargs["repositories"] = inversed_repositories
 
-    _nixpkgs_package(**kwargs)
+    if len(systems) > 0:
+        for key, value in systems.items():
+            kwargs["name"] = name + "-" + key
+            kwargs["nixopts"] = kwargs["nixopts"] + ["--argstr", "system", key]
+            _nixpkgs_package(**kwargs)
+
+        inversed_systems = {value: "@" + name + "-" + key for (key, value) in systems.items()}
+        _nixpkgs_bundle(
+            name = name,
+            config_package_map = inversed_systems,
+            targets = targets
+        )
+    else:
+        _nixpkgs_package(**kwargs)
+    
 
 def _parse_cc_toolchain_info(content, filename):
     """Parses the `CC_TOOLCHAIN_INFO` file generated by Nix.
@@ -1267,3 +1285,37 @@ def _label_string(label):
         return "None"
     else:
         return '"%s"' % label
+
+def _nixpkgs_bundle_impl(repository_ctx):
+    build_file = ""
+    for target in repository_ctx.attr.targets:
+        config_target_map = dict()
+
+        for config, package in repository_ctx.attr.config_package_map.items():
+            config_target_map[config] = "{p}//:{t}".format(p = package, t = target)
+
+        build_file += """\
+alias(
+    name = "{t}",
+    actual = select({ctm}),
+    visibility= ["//visibility:public"]
+)
+""".format(
+            t = target,
+            ctm = config_target_map,
+        )
+
+    repository_ctx.file(
+        "BUILD.bazel",
+        executable = False,
+        content = build_file,
+    )
+
+_nixpkgs_bundle = repository_rule(
+    implementation = _nixpkgs_bundle_impl,
+    attrs = {
+        "config_package_map": attr.string_dict(default = {}),
+        "targets": attr.string_list(default = []),
+    },
+)
+
